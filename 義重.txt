# -*- coding: utf-8 -*-
"""
Created on Fri Mar 30 21:17:34 2018

@author: roger
"""
#%%
import numpy as np
import random
import time
import itertools
import copy

#print("hello")
#%%
start_time = time.time()

clusters = 3
filename = "iris.data.txt"

original_data = np.loadtxt(filename, delimiter=",", dtype = str)
original_dimension = len(original_data[0])
 
answer = data = np.loadtxt(filename, delimiter=",", usecols = original_dimension-1, dtype = str)
answer_un = np.unique(answer)        

data = np.loadtxt(filename, delimiter=",", usecols = range(original_dimension-1))
numdata = len(data)
dimension = len(data[0])

#y_lable = np.zeros(numdata,dtype = int)
#for i in range(numdata):
#    for j in range(len(answer_un)):
#        if answer[i] == answer_un[j]:
#            y_lable[i] = j+1

fn = "kmeans_single_" + filename
file = open( fn ,'w')

best_accuracy = 0
best_sol = np.zeros(numdata, dtype = int)
round_accuracy = 0

round_sse = 0
kmeans_round = 0
while (kmeans_round<30):
    tStart = time.time()
    
    kpoints = random.sample(list(data),clusters)
    
    kmeans_itreation=0
    while(kmeans_itreation<50):
        
        distance_data = np.zeros((numdata,clusters),dtype = float)
        for i in range(numdata):
            for j in range(clusters):
                temp_distance = 0
                for k in range(dimension):
                    temp_distance += (data[i][k]-kpoints[j][k])**2
                distance_data[i][j] = temp_distance ** (0.5)
        
        sol = np.zeros(numdata,dtype = int)
        count_clusters = np.zeros(clusters, dtype = int)
        count_sum_clusters = np.zeros((clusters,dimension), dtype = float)
        
        for i in range(numdata):
            min_clusters = distance_data[i].argmin()
            sol[i] = min_clusters + 1
            count_clusters[min_clusters] += 1
            for j in range(dimension):
                count_sum_clusters[min_clusters][j] += data[i][j]
                
        for i in range(clusters):
            kpoints[i] = count_sum_clusters[i] / count_clusters[i]
            
        sse = 0
        for i in range(numdata):
            temp_sse = 0
            for j in range(dimension):
                temp_sse += (data[i][j]-kpoints[sol[i]-1][j])**2
            sse += temp_sse
        
#        print sse
        
        file.write(str(kmeans_itreation))
        file.write(',')
        file.write(str(sse))
        file.write('\n')
        kmeans_itreation += 1
    
    tStop = time.time()
    
    perm_sol = list(itertools.permutations(range(1,clusters+1)))
    accuracy_array = np.zeros(len(perm_sol),dtype = float)
    for i in range(len(perm_sol)):
        accuracy_count = 0
        temp_sol = copy.deepcopy(sol)
        temp_un = copy.deepcopy(answer_un)
        accuracy_sol = copy.deepcopy(answer)
        for j in range(clusters):
            temp_un[j] = answer_un[perm_sol[i][j]-1]
        for k in range(numdata):
            accuracy_sol[k] = temp_un[temp_sol[k]-1]
            if accuracy_sol[k] == answer[k]:
                accuracy_count+=1
        accuracy_array[i] = float(accuracy_count)/ float(numdata)
        if accuracy_array[i] > best_accuracy:
            best_accuracy = accuracy_array[i]
            best_sol = accuracy_sol
    
    round_accuracy += max(accuracy_array)    

    
    file.write("1 Round Total Seconds:")
    file.write(str((tStop - tStart)))
    file.write('\n')
    file.write("Accuracy:")
    file.write(str(max(accuracy_array)))
    file.write('\n')
    
    round_sse += sse
    kmeans_round += 1

end_time = time.time()
file.write('\n')
file.write("Total time:")
file.write(str(end_time - start_time))
file.write('\n')
file.write("Avg time:")
file.write(str((end_time - start_time)/kmeans_round))
file.write('\n')
file.write("Avg sse:")
file.write(str(round_sse / kmeans_round))
file.write('\n')
file.write("Avg Accuracy:")
file.write(str(round_accuracy / kmeans_round))
file.write('\n')
file.write("Best Accuracy:")
file.write(str(best_accuracy))
file.close()